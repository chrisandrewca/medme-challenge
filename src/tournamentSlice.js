import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// import { fetchCount } from './counterAPI';
import { createRound as createRoundApi, findMatchesForRound as findMatchesForRoundApi } from './api/API';

const initialState = {
	rounds: []
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const tournamentSlice = createSlice({
  name: 'tournament',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
	createRound: (state, action) => {

		// TODO move to API
		let roundId = 1;
		if (state.rounds.length) {
			roundId = state.rounds[state.rounds.length - 1].id + 1;
		}

		const round = createRoundApi(action.payload);
		round.id = roundId;
		findMatchesForRound(round);

		state.rounds = [...state.rounds, round];
	},
	findMatchesForRound: (state, action) => {

		const round = state.rounds.find(round => round.id === action.payload);
		findMatchesForRoundApi(round);

		// make sure UI uses id as key
		state.rounds = [
			...state.rounds.filter(otherRound => otherRound.id !== round.id),
			round
		];

		// or considering sorting
	}
  },
//   // The `extraReducers` field lets the slice handle actions defined elsewhere,
//   // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//       .addCase(incrementAsync.pending, (state) => {
//         state.status = 'loading';
//       })
//       .addCase(incrementAsync.fulfilled, (state, action) => {
//         state.status = 'idle';
//         state.value += action.payload;
//       });
//   },
});

export const { createRound, findMatchesForRound } = tournamentSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.counter.value;
export const selectRounds = (state) => state.tournament.rounds;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default tournamentSlice.reducer;
